Date : 13 October 2011
Categories : portfolio

# Arduino Theremin

<img src="/attachments/arduino-theremin.png" alt="Arduino Theremin"/>

## Sixth exercise in the course Prototyping for Interaction Design

For the last exercise of the course Prototype in Interaction Design, we had to realize a prototype of a music instrument based on an Arduino. For that purpose, we could use some additional chips from SparkFun.

Because we had to make think about an electronic musicl instrument, I immediatly thought about a theremin for two reasons.
A theremin is the first electronic instrument, and from this point, I think, because of the situation, it's interesting to reproduce this instrument.
The second one is that I think a theremin is a really interesting interaction, because it's also probably the only musical instrument you don't have to touch to play it.

## Theremin

A theremin is controlled by two metal antenna. The tehremin produce a unique continuous sound which frequency is controlled by the proximity between a hand and one antenna, the volume is controlled by the other antenna.


## Arduino Prototype (Hardware)

Midi is meant for emulating all sort of musical instruments which produces notes. So, it can only produce specific notes limited in time, basically like a piano key.
But what we need for the emulating a theremin is actually a continus sound, so the MIDI chip is no help.
But the arduino can do some sound by itself, it just need some coding.

Instead of the two antenna, we used two IR proximity sensor. It's not as accurate as the antenna, but I think the two experiences are really close and it's still a touch less device.

I thought the hard part would be to make the frequency change with the proximity sensor, I was wrong.

I'll explain how the arduino can make sound to explain why it's so hard to change the amplitude of this sound digitally.
The arduino got some special output pin, they are marked PWM on the board. With those pin, the arduino can output analog value.
I firstly thought the value you want in output would proportional to the voltage output on the pin. But it's not the case at all.
PWM mean Pulse Width Modulation, that's mean the analog output will produce a signal at a given frequency (that I can't change), and by example if I want the output value to be 80% (the range is between 0 and 255, so 80% would be 204), the output signal will be in the state HIGH 80% of the time, and 20% LOW.

Because the frequency of this output signal is unmodifiable, PWM will be no help, we have to use HIGH or LOW state to make sound. So the frequency of alternation between HIGH and LOW will be the frequency of the sound.

<img src="/attachments/arduino1.jpg" alt="Arduino 1"/>

So, the arduino can't modulate the intensity of the sound itself. I almost gave up this project because of this constraint, but hopefully, I found the good chip to do it : the DS1803
It's a digital potentiometer controlled by a I2C bus.

The arduino is totally capable of handling a I2C chip. I read the doc, I connect the both, and it was magically running.
(In fact it was painful, and very long, I plugged it so many ways, and tried so many combinations, I can't remember all of them, but finally it worked).

<img src="/attachments/arduino2.jpg" alt="Arduino 2"/>

## Software

The software was not so a big deal.
I would light to highlight the fact that with some delay and calcul, I can have the exact frequency I want.

I use a log scale for the frequency control to be able to cover a greater range of sound.
Also, because of the I2C bus writing and the log calcul, I can't now produce frequency higher than 880Hz.

#### Improvements :
The duty cycle of the signal in output will not change the sound so much, so instead of having a 50% duty cycle, I should use a 99% duty cycle, this way, I don't waste 50% of the time waiting, and make calcul instead.
With this improvement, It would be possible to get higher sound than 880Hz.
The box

After having a working prototype, I wanted to hide all those wires.
So I made a box.

What I wanted, is to give the feeling of a magic box producing sound when you approach it.

When I started the box, I wanted the prototype to be auto powered by a 9V battery.
Until this time, it was powered by USB.
But I never succeed to make the prototype working properly with the battery.
The problem might be the sensors calibration. As they are not powered the same way, they don't give the same output value. And I figured out, that the range would be smaller with a battery.
So I had to make a choice : auto powered or more sensitive.

I choose to make it more sensitive, and dropped the battery.
For a next version, the battery would be a good idea, if the problem of the sensitivity is resolved.

Finally, I enclosed everything in the box, and cover it with a black cardboard.
Only the power LED remain above this black cardboard.

I put a piece of transparent plastic to make the light more diffuse.
And then I put the cover made of translucent plastic to.

<img src="/attachments/arduino3.jpg" alt="Arduino 3"/>

<img src="/attachments/arduino4.jpg" alt="Arduino 4"/>

<img src="/attachments/arduino5.jpg" alt="Arduino 5"/>

<img src="/attachments/arduino-theremin.png" alt="Arduino 6"/>

<pre class="brush: c++">
#define SPK 3

#include <Wire.h>

#define DEBUG

unsigned long utime, uelapsed;

int val = 0;
int vol = 0;

int hperiod = 0;
int volume = 0;

int i = 0;
float log500;

int test = 0;

void setup() {
  Serial.begin(9600);
  Wire.begin();
  pinMode(SPK, OUTPUT);
  log500 = log(500);
  
  utime = micros();
}

void loop() {
    
    if( i < 2 )
    {  
        val = analogRead(0);
        val = max(51, min(550, val)) - 50;

        hperiod = (log(val) / log500 * 899) + 1012;
        hperiod *= 2;
        
        /*
        1136 is the 440Hz hperiod
        568 is the 880Hz hperiod
        
        Octav 4
        
        C4 : 261.63 Hz -> 0.003822192 s -> 1911 us
        B4 : 493.88 Hz -> 0.002024783 s -> 1012 us
        
        */
        
    }
    else
    {
        i = 0;
        test++;
    
        vol = analogRead(1);
        vol = max(50, min(550, vol)) - 50;
        volume = vol / 2;
        //volume = vol - 250;
        //volume = test;

        Wire.beginTransmission(0x28);
        Wire.send(0xA9);
        Wire.send(volume);
        Wire.endTransmission();
    }
    
    i += 1;

    uelapsed = micros() - utime;

    delayMicroseconds(hperiod - uelapsed);
    digitalWrite(SPK, HIGH);
    delayMicroseconds(hperiod);
    digitalWrite(SPK, LOW);
    
    utime = micros();
}
</pre>
